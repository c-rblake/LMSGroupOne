@using LMSGroupOne.Models.MainNavigation
@model LMSGroupOne.Models.MainNavigation.TreeNode


<style>
    treeItem {
    }

    carretIcon {
    }

    folderIcon {
    }
</style>

<script>


        //root = 0,    enum from c#
        //folder = 1,
        //student = 2,
        //teacher = 3,
        //course = 4,
        //module = 5,
        //activity = 6,
        //file = 7,
        //search = 8,
        //none = 9,
        //trash = 10,

    

    //let season = seasons.SPRING


    class TreeItemGenerator
    {
        static NodeTypes =  
        {
            ROOT: 0,
            FOLDER: 1,
            STUDENT: 2,
            TEACHER: 3,
            COURSE: 4,
            MODULE: 5,
            ACTIVITY: 6,
            FILE: 7,
            SEARCH: 8,
            NONE: 9,
            TRASH: 10
        }



        static GenerateItem(id, type, parentId, parentType, name, hasChildren, canCreate, canEdit, isOpen) {
            let item = document.createElement("nobr");
            item.classList = "treeItem";

            let classList = "";
            let style = "";

            switch (type) {
                case this.NodeTypes.TEACHER:  
                    classList = "fas fa-user-graduate";
                    style = "color:black;";
                    break;
                case this.NodeTypes.COURSE: 
                    classList = "fas fa-chalkboard-teacher";
                    style = "color:darkblue;";
                    break;
                case this.NodeTypes.MODULE: 
                    classList = "fas fa-book-open";
                    style = "color:green;";
                    break;
                case this.NodeTypes.ACTIVITY: 
                    classList = "fas fa-flask";
                    style = "color:dodgerblue;";
                    break;
                case this.NodeTypes.FILE: 
                    classList = "fas fa-file";
                    style = "color:dimgray;";
                    break;
                case this.NodeTypes.STUDENT: 
                    classList = "fas fa-user";
                    style = "color:black;";
                    break;
                case this.NodeTypes.FOLDER: 
                    if (isOpen)
                    {
                        classList = "folderIcon fas fa-folder-open";
                        style = "color:yellow;";
                    }
                    else
                    {
                        classList = "folderIcon fas fa-folder";
                        style = "color:yellow;";
                    }
                    break;
                case this.NodeTypes.ROOT: 
                    classList = "fas fa-globe";
                    style = "color:black;";
                    break;
                case this.NodeTypes.SEARCH: 
                    classList = "fas fa-search";
                    style = "color:black;";
                    break;
            };

            
            if (hasChildren)
            {
                let caret = this.#GenerateCaret(id, type, isOpen);
                item.innerHTML += caret.outerHTML;
            }
            let icon = this.#GenerateIcon(id, type, classList, style, isOpen);
            item.innerHTML += icon.outerHTML;
            let text = this.#GenerateText(id, name, type, parentId, parentType, canEdit, isOpen);
            item.innerHTML += text.outerHTML;


            if (canCreate != this.NodeTypes.NONE)
            {
                let add = this.#GenerateAddIcon(id, type, parentId, parentType, isOpen);
                item.innerHTML += add.outerHTML;
            }

            return item;
        }

        static GenerateTestItemHTML(node, parentNode)
        {            
            let hasChildren = node.Nodes != null;            
            

            let item = this.GenerateItem(node.Id, node.Type, parentNode.Id, parentNode.Type, node.Name, hasChildren, node.CanCreate, node.Editable, node.Open);
            document.write(item.outerHTML);
        }

        static GenerateItemHTML(id, type, parentId, parentType, name, hasChildren, canCreate, canEdit, isOpen)
        {
            let item = this.GenerateItem(id, type, parentId, parentType, name, hasChildren, canCreate, canEdit, isOpen);
            document.write(item.outerHTML);
        }

        static #GenerateAddIcon(id, type, parentId, parentType, isOpen)
        {
            let add = document.createElement("i");
            add.id = id;
            add.dataset.itemType = type;
            add.dataset.itemCreates = "teacher";  // todo
            add.dataset.itemParentId = parentId;
            add.dataset.itemParentType = parentType;
            add.dataset.itemExtra = "new";
            add.dataset.itemOpen = isOpen;
            add.classList = "fas fa-plus-circle";
            add.style = "color:green";
            return add;            
        }

        static #GenerateCaret(id, type, isOpen)
        {
            let caret = document.createElement("i");
            if (isOpen)
            {
                caret.classList = "carretIcon fas fa-caret-down";
            }
            else
            {
                caret.classList = "carretIcon fas fa-caret-right";
            }
            caret.id = id;
            caret.dataset.itemType = type;
            caret.dataset.itemExtra = "caret";
            caret.dataset.itemOpen = isOpen;
            return caret;
        }

        static #GenerateIcon(id, type, classList, style, isOpen)
        {
            let icon = document.createElement("i");
            icon.id = id;
            icon.dataset.itemType = type;
            icon.dataset.itemExtra = "icon";
            icon.dataset.itemOpen = isOpen;
            icon.classList = classList;
            icon.style = style;
            return icon;
        }

        static #GenerateText(id, name, type, parentId, parentType, canEdit, isOpen) {
            let text = document.createElement("span");
            text.innerHTML = name;
            text.id = id;
            text.contentEditable = false;
            text.dataset.itemType = type;
            text.dataset.itemExtra = "text";
            text.dataset.itemParentId = parentId;
            text.dataset.itemParentType = parentType;
            text.dataset.itemOpen = isOpen;
            text.dataset.itemEdit = canEdit;
            return text;
        }

        static Test(input)
        {
            console.log(input.Id);
        }

    }


</script>
















<script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>


<script>
    let obj = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)));
                TreeItemGenerator.Test(obj);
</script>



<div id="menuDivId" style="background-color:aqua;">
    <div>
        <i id="trashCanId" class="fa fa-trash-alt" data-item-type="@NodeType.trash" style ="font-size:48px;color:black; padding:4px;"></i>        

    </div>
    


    <ul class="list-group" style="user-select: none;">
        @{
            TreeRecursive(Model, Model);
        }
    </ul>




</div>





@functions
{

    private void TreeName(TreeNode node, TreeNode parentNode)
    {
        <span contenteditable="false" id="@node.Id" data-item-type="@node.Type" data-item-extra="text" data-item-parent-id="@parentNode.Id" data-item-parent-type="@parentNode.Type" style="display: inline-block; page-break-inside:avoid;">
            @node.Name
        </span>
    }

    private void TreeEditableNew(TreeNode node, TreeNode parentNode)
    {
        if (node.Editable)
        {
            <i id="@node.Id" data-item-type="@node.Type" data-item-creates="@node.CanCreate" data-item-parent-id="@parentNode.Id" data-item-parent-type="@parentNode.Type" data-item-extra="new" class="fas fa-plus-circle" style="color:green"></i>
        }
    }

    private void TreeEditableDelete(TreeNode node)
    {
        if (node.Editable)
        {
            <i id="@node.Id" data-item-type="@node.Type" data-item-extra="delete" class="fas fa-minus-circle" style="color:red"></i>
        }
    }

    private void TreeRecursive(TreeNode node, TreeNode parentNode)
    {
        bool hasChildren = node.Nodes != null;


        <li class="list-group-item" style="background:none;">

            

            <script>

                //TreeItemGenerator.GenerateItemHTML("@node.Id", "@node.Type", "@parentNode.Id", "@parentNode.Type", "@node.Name", "@hasChildren", "@node.CanCreate", "@node.Editable", "False");

                TreeItemGenerator.GenerateTestItemHTML(@(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(node))), @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(parentNode))));

            </script>
            
            @if (hasChildren)
            {

                @foreach (var item in node.Nodes)
                {
                    <ul class="list-group" hidden>
                        @{
                            TreeRecursive(item, node);
                        }
                    </ul>
                }
            }


        </li>
    }
}




<script>

    



   


    class TreeHandler
    {
        #dragElement;
        #pressPositionX;
        #pressPositionY;
        #initialMove;
        #draging;
        #longPress;
        #pressTimer;

        #selectBar;
        #selectSelection;

        #menuDiv;

        #currentElement;
        #editTimer;
        #editCancel;

        #thrashCan;
        #movedElement;

        #contentDiv;

        constructor(menuDivId, contentDivId, thrashCanId)
        {
            this.#pressPositionX = 0;
            this.#pressPositionY = 0;
            this.#initialMove = false;
            this.#draging = false;
            this.#longPress = false;
            this.#editCancel = false;


            window.addEventListener("mouseup", (event)=>this.#OnMouseUp(event));
            window.addEventListener("mousemove", (event)=>this.#OnMouseMove(event));


            let t = document.getElementsByClassName("treeItem");
            for (let i = 0; i < t.length; i++)
            {
                t[i].addEventListener("click", (event) => this.#OnClick(event));
                t[i].addEventListener("dblclick", (event)=> this.#OnDblClick(event))
                t[i].addEventListener("mousedown", (event)=>this.#OnDown(event));
            }




            this.#menuDiv = document.getElementById(menuDivId);

            // the selection
            this.#selectBar = document.createElement("div");
            this.#selectSelection = document.createElement("div");
            this.#menuDiv.prepend(this.#selectBar);
            this.#menuDiv.prepend(this.#selectSelection);
            this.#selectBar.style = "top:-4096px; left:0px; width:100%; height:32px; position:absolute; background-color:#ffff0055;";
            this.#selectSelection.style ="top:-4096px;left:0px;width:100%;height:32px;position:absolute;background-color:#ff000033;";

            // the draggable element
            this.#dragElement = document.createElement("nobr");
            document.body.append(this.#dragElement);
            this.#dragElement.style = "top:-4096px; left:0px; width:00px; height:0px; position:absolute; background-color:#ffff0055; z-index:100;";


            this.#thrashCan = document.getElementById(thrashCanId);

            this.#contentDiv = document.getElementById(contentDivId);
        }

        #OnMouseUp(event)
        {


            this.#dragElement.style.top = -4096 + "px";
            let e = document.elementFromPoint(event.clientX, event.clientY);
            console.log("dragged to>>" + e.id + ": " + e.dataset.itemType);
            console.log("belongs to parent" + e.dataset.itemParentId + ": " + e.dataset.itemParentType);

            if (this.#draging)
            {
                if (e.dataset.itemType == "trash")
                {
                    clearTimeout(this.#pressTimer);
                    this.#longPress = false;
                    this.#initialMove = false;
                    this.#draging = false;


                    this.#OnDelete(event);
                    //return;
                }
            }


            clearTimeout(this.#pressTimer);
            this.#longPress = false;
            this.#initialMove = false;
            this.#draging = false;






            // dragged to


        }

        #OnMouseMove(event)
        {
            if (this.#longPress) {

                if (!this.#initialMove) {
                    let dist = (event.clientX - this.#pressPositionX) * (event.clientX - this.#pressPositionX) + (event.clientY - this.#pressPositionY) * (event.clientY - this.#pressPositionY);
                    if (dist < 50) {
                        //longpress = false;
                        this.#draging = true;
                    }
                    this.#initialMove = true;
                }

                //console.log("distance:" + dist);

            }
            if (this.#draging)
            {
                this.#dragElement.style.top = event.pageY + "px";
                this.#dragElement.style.left = event.pageX + "px";

                let e = document.elementFromPoint(event.clientX, event.clientY);
                //console.log("mosemove-" + e.id + ": " + e.dataset.itemType);

            }

        }



        #OnClick(event)
        {

            if (this.#longPress)
            {
                return;
            }

            console.log("enkel click");
            console.log("id:" + event.target.id);
            console.log("type:" + event.target.dataset.itemType);
            console.log("type:" + event.target.dataset.itemExtra);
            console.log("ypos:" + event.clientY);


            // todo filtera bort folder och dubbelaktivering
            $.ajax({
                type: "GET",
                url: "/MainNavigation/OnTreeClick",
                data: { id: event.target.id, type: event.target.dataset.itemType },
                cache: false,
                success: result =>
                {
                    console.log(result);
                    //this.#contentDiv.innerHTML = result;
                    document.getElementById("contentDivId").innerHTML = result;
                }
            });











            if (event.target.dataset.itemExtra == "caret")
            {

                console.log("current element " + this.#currentElement.dataset.itemType);

                this.#ToggleExpand(event.target.parentNode);
                this.#SelectionOutline(event.target.parentNode);
                return;
            }

            if (event.target.dataset.itemExtra == "text")
            {
                // new current
                if (this.#currentElement == event.target.parentNode)
                {
                    this.#editCancel = false;
                    this.#editTimer = window.setTimeout(() =>
                    {
                        if (!this.#editCancel)
                        {

                            event.target.contentEditable = true;
                            event.target.focus();
                        }

                    }, 500);





                    //this.#currentElement = event.target.parentNode;
                }


                this.#SelectionOutline(event.target.parentNode);
                return;
            }

            if (event.target.dataset.itemExtra == "new")
            {

                console.log("adding something");
                this.#OnNew(event);
            }


            

        }


        #OnDblClick(event)
        {
            this.#editCancel= true;

            console.log("dubbeltrubbel");
            console.log("childCount" + event.target.parentNode.parentNode.childElementCount);
            if (event.target.parentNode.parentNode.childElementCount > 1)
            {
                this.#ToggleExpand(event.target.parentNode);
                this.#SelectionOutline(event.target.parentNode);
            }
        }


        #ToggleExpand(node)
        {
            let children = node.parentNode.childNodes;
            children.forEach(s => { s.hidden = !s.hidden; });
            node.hidden = false;




            let carret = node.childNodes[1];
            if (carret.classList.contains("carretIcon"))
            {
                carret.classList.toggle("fa-caret-right");
                carret.classList.toggle("fa-caret-down");
            }

            let icon = node.childNodes[3];
            if (icon.classList.contains("folderIcon"))
            {
                icon.classList.toggle("fa-folder");
                icon.classList.toggle("fa-folder-open");
            }

            console.log(icon.classList);



            console.log("number of children " + node.parentNode.childElementCount);
            if (node.parentNode.childElementCount <= 1)
            {
                children.forEach(s => { s.hidden = true; });
                node.hidden = false;
                carret.hidden = true;
                icon.classList.add("fa-folder");
                icon.classList.remove("fa-folder-open");

            }




        }

        #SelectionOutline(node)
        {
            // new current
            if (this.#currentElement != node)
            {
                console.log("new current");
                this.#currentElement = node;
            }


            let rect = node.getBoundingClientRect();
            let rect2 = node.parentNode.getBoundingClientRect();
            let mr = this.#menuDiv.getBoundingClientRect();

            let marginal = rect.top - rect2.top;

            this.#selectBar.style.top = (rect.top - mr.top) + "px";
            this.#selectBar.style.height = (rect.height) + "px";

            this.#selectSelection.style.top = (rect.top - mr.top) + "px";
            this.#selectSelection.style.height = (rect2.height - marginal * 2) + "px";
        }






        #OnDown(event)
        {
            this.#pressPositionX = event.clientX;
            this.#pressPositionY = event.clientY;
            console.log("on down:" + event.clientY);

            this.#longPress = false;
            this.#pressTimer = window.setTimeout(() =>
            {
                // your code here
                console.log("timer");
                this.#dragElement.innerHTML = event.target.parentNode.innerHTML;
                this.#dragElement.id = event.target.id;
                this.#dragElement.dataset.itemType = event.target.dataset.itemType;

                this.#movedElement = event.target.parentNode.parentNode.parentNode;

                this.#longPress = true; //if run hold function, longpress is true


            }, 100);
        }


        #OnDelete()
        {
            console.log("delete-----------------")
            console.log("item id" + this.#dragElement.id);
            console.log("item type" + this.#dragElement.dataset.itemType);

            $.ajax({
                type: "GET",
                url: "/MainNavigation/OnDelete",
                data: { id: this.#dragElement.id, type: this.#dragElement.dataset.itemType },
                cache: false,
                success: result =>
                {
                    let obj = JSON.parse(result);
                    console.log(obj.success);
                    if (obj.success)
                    {

                        this.#removeElement(this.#movedElement);
                    }


                }
            });


        }

        #removeElement(element)
        {
            let pNode = element.parentNode;

            element.remove();


            if (pNode.childElementCount <= 1)
            {
                this.#ToggleExpand(pNode.childNodes[1])
            }



            // selections todo refactor
            let rect = pNode.childNodes[1].getBoundingClientRect();
            let rect2 = pNode.parentNode.childNodes[1].getBoundingClientRect();
            let mr = this.#menuDiv.getBoundingClientRect();

            let marginal = rect.top - rect2.top;

            this.#selectBar.style.top = (rect.top - mr.top) + "px";
            this.#selectBar.style.height = (rect.height) + "px";

            this.#selectSelection.style.top = (rect.top - mr.top) + "px";
            this.#selectSelection.style.height = (rect2.height - marginal * 2) + "px";





        }



        #OnNew(event)
        {
            console.log("new---------------------------")
            console.log("new entity id:" + event.target.id + "can create " + event.target.dataset.itemCreates);
            console.log("belongs to id:" + event.target.dataset.itemParentId + " of type " + event.target.dataset.itemParentType);

            $.ajax({
                type: "GET",
                url: "/MainNavigation/OnNew",
                data: { id: event.target.dataset.itemParentId, type: event.target.dataset.itemCreates },
                cache: false,
                success: result => {
                    let obj = JSON.parse(result);
                    console.log("result forn new "+obj.type);
                    if (obj.success)
                    {

                        // todo add element
                        this.#AddElement(event, obj.id, obj.type, obj.parentId, obj.parentType, obj.name);
                    }
                    //string parentId, string parentType

                }
            });
        }

        #AddElement(event, id, type, parentId, parentType, name)
        {
            let listGroup = document.createElement("ul");
            listGroup.classList = "list-group";


            let listItem = document.createElement("li");
            listItem.classList = "list-group-item";
            listItem.style = "background:none;";


            let item = TreeItemGenerator.GenerateItem(id, type, parentId, parentType, name);
            

           
            listItem.appendChild(item);
            listGroup.appendChild(listItem);
            event.target.parentNode.parentNode.append(listGroup);

           
            item.addEventListener("click", (event) => this.#OnClick(event));
            item.addEventListener("dblclick", (event) => this.#OnDblClick(event));
            item.addEventListener("mousedown", (event) => this.#OnDown(event));




            item.addEventListener("paste", function(even)  {
                
                
                var $self = $(this);
                setTimeout(function () {
                    $self.html($self.text());
                }, 0);

                
                
            }, false);

            item.addEventListener("keypress", (event) =>
            {
                if (event.which == 13)
                {
                    event.target.contentEditable = false;
                }
                return event.which != 13;
                
            });

            item.addEventListener("blur", (event) =>
            {
                console.log("lost focus", true);
                event.target.contentEditable = false;
            }, true);

            



          


        }


    }



    new TreeHandler("menuDivId", "contentDivId", "thrashCanId");


















</script>