@using LMSGroupOne.Models.MainNavigation
@model LMSGroupOne.Models.MainNavigation.TreeNode



<script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>

<div id="menuDivId" style="background-color:aqua;">
    <div>
        <i class="fa fa-trash-alt" style ="font-size:48px;color:black; padding:4px;"></i>        

    </div>
    

    <ul class="list-group" style="user-select: none;">
        @{
            TreeRecursive(Model, Model);
        }
    </ul>




</div>



<style>
    treeItem {
    }

    carretIcon {
    }

    folderIcon {
    }
</style>

@functions
{

    private void TreeName(TreeNode node, TreeNode parentNode)
    {
        <span contenteditable="false" id="@node.Id" data-item-type="@node.Type" data-item-extra="text" data-item-parent-id="@parentNode.Id" data-item-parent-type="@parentNode.Type" style="display: inline-block; page-break-inside:avoid;">
            @node.Name
        </span>
    }

    private void TreeEditableNew(TreeNode node, TreeNode parentNode)
    {
        if (node.Editable)
        {
            <i id="@node.Id" data-item-type="@node.Type" data-item-creates="@node.CanCreate" data-item-parent-id="@parentNode.Id" data-item-parent-type="@parentNode.Type" data-item-extra="new" class="fas fa-plus-circle" style="color:green"></i>
        }
    }

    private void TreeEditableDelete(TreeNode node)
    {
        if (node.Editable)
        {
            <i id="@node.Id" data-item-type="@node.Type" data-item-extra="delete" class="fas fa-minus-circle" style="color:red"></i>
        }
    }

    private void TreeRecursive(TreeNode node, TreeNode parentNode)
    {
        bool hasChildren = node.Nodes != null;


        <li class="list-group-item" style="background:none;">

            <nobr class="treeItem">
                @if (hasChildren)
                {
                    <i id="@node.Id" data-item-type="@node.Type" data-item-extra="caret" class="carretIcon fas fa-caret-right"></i>
                }
                @switch (node.Type)
                {
                    case NodeType.student:
                        <i id="@node.Id" data-item-type="@node.Type" data-item-extra="icon" class="fas fa-user" style="color:black"></i>
                        TreeName(node, parentNode);
                        

                        break;
                    case NodeType.teacher:
                        <i id="@node.Id" data-item-type="@node.Type" data-item-extra="icon" class="fas fa-user-graduate" style="color:black"></i>
                        TreeName(node, parentNode);
                        
                        break;
                    case NodeType.folder:
                        <i id="@node.Id" data-item-type="@node.Type" data-item-extra="icon" data-item-parent-type="@parentNode.Type" class="folderIcon fas fa-folder" style="color:lightgoldenrodyellow"></i>
                        TreeName(node, parentNode);
                        TreeEditableNew(node, parentNode);
                        break;
                    case NodeType.course:
                        <i id="@node.Id" data-item-type="@node.Type" data-item-extra="icon" class="fas fa-chalkboard-teacher" style="color:darkblue;"></i>
                        TreeName(node, parentNode);
                        
                        break;
                    case NodeType.module:
                        <i id="@node.Id" data-item-type="@node.Type" data-item-extra="icon" class="fas fa-book-open" style="color:green;"></i>
                        TreeName(node, parentNode);
                        
                        break;
                    case NodeType.activity:
                        <i id="@node.Id" data-item-type="@node.Type" data-item-extra="icon" class="fas fa-flask" style="color:dodgerblue;"></i>
                        TreeName(node, parentNode);
                        
                        break;
                    case NodeType.file:
                        <i id="@node.Id" data-item-type="@node.Type" data-item-extra="icon" class="fas fa-file" style="color:dimgray;"></i>
                        TreeName(node, parentNode);
                        
                        break;
                    case NodeType.root:
                        TreeName(node, parentNode);
                        break;
                    case NodeType.search:
                        TreeName(node, parentNode);
                        break;
                }




            </nobr>


            @if (hasChildren)
            {

                @foreach (var item in node.Nodes)
                {
                    <ul class="list-group" hidden>
                        @{
                            TreeRecursive(item, node);
                        }
                    </ul>

                }

            }



        </li>
    }
}




<script>

    

    class TreeHandler
    {
        #dragElement;
        #pressPositionX;
        #pressPositionY;
        #initialMove;
        #draging;
        #longPress;
        #pressTimer;

        #selectBar;
        #selectSelection;        

        #menuDiv;

        #currentElement;
        #editTimer;
        #editCancel;

        constructor(menuDivId)
        {            
            this.#pressPositionX = 0;
            this.#pressPositionY = 0;
            this.#initialMove = false;
            this.#draging = false;
            this.#longPress = false;
            this.#editCancel = false;

            
            window.addEventListener("mouseup", (event)=>this.#OnMouseUp(event));
            window.addEventListener("mousemove", (event)=>this.#OnMouseMove(event));


            let t = document.getElementsByClassName("treeItem");
            for (let i = 0; i < t.length; i++)
            {
                t[i].addEventListener("click", (event) => this.#OnClick(event));
                t[i].addEventListener("dblclick", (event)=> this.#OnDblClick(event))
                t[i].addEventListener("mousedown", (event)=>this.#OnDown(event));
            }


            

            this.#menuDiv = document.getElementById(menuDivId);

            // the selection
            this.#selectBar = document.createElement("div");
            this.#selectSelection = document.createElement("div");
            this.#menuDiv.prepend(this.#selectBar);
            this.#menuDiv.prepend(this.#selectSelection);
            this.#selectBar.style = "top:-4096px; left:0px; width:100%; height:32px; position:absolute; background-color:#ffff0055;";
            this.#selectSelection.style ="top:-4096px;left:0px;width:100%;height:32px;position:absolute;background-color:#ff000033;";

            // the draggable element
            this.#dragElement = document.createElement("nobr");
            document.body.append(this.#dragElement);
            this.#dragElement.style = "top:-4096px; left:0px; width:00px; height:0px; position:absolute; background-color:#ffff0055; z-index:100;";
                       

        }

        #OnMouseUp(event)
        {
            clearTimeout(this.#pressTimer);
            this.#longPress = false;
            this.#initialMove = false;
            this.#draging = false;

            this.#dragElement.style.top = -4096 + "px";

            let e = document.elementFromPoint(event.clientX, event.clientY);
            console.log("dragged to>>" + e.id + ": " + e.dataset.itemType);
            console.log("belongs to parent" + e.dataset.itemParentId + ": " + e.dataset.itemParentType);
        }

        #OnMouseMove(event)
        {
            if (this.#longPress) {

                if (!this.#initialMove) {
                    let dist = (event.clientX - this.#pressPositionX) * (event.clientX - this.#pressPositionX) + (event.clientY - this.#pressPositionY) * (event.clientY - this.#pressPositionY);
                    if (dist < 50) {
                        //longpress = false;
                        this.#draging = true;
                    }
                    this.#initialMove = true;
                }

                //console.log("distance:" + dist);

            }
            if (this.#draging) {
                this.#dragElement.style.top = event.pageY + "px";
                this.#dragElement.style.left = event.pageX + "px";

                let e = document.elementFromPoint(event.clientX - 5, event.clientY - 5);
                //console.log("mosemove-" + e.id + ": " + e.dataset.itemType);

            }

        }



        #OnClick(event)
        {

            if (this.#longPress)
            {
                return;
            }

            console.log("enkel click");
            console.log("id:" + event.target.id);
            console.log("type:" + event.target.dataset.itemType);
            console.log("type:" + event.target.dataset.itemExtra);
            console.log("ypos:" + event.clientY);

            if (event.target.dataset.itemExtra == "caret")
            {
                               
                console.log("current element " + this.#currentElement.dataset.itemType);

                this.#ToggleExpand(event.target.parentNode);
                this.#SelectionOutline(event.target.parentNode);
                return;
            }

            if (event.target.dataset.itemExtra == "text")
            {
                // new current
                if (this.#currentElement == event.target.parentNode)
                {                    
                    this.#editCancel = false;
                    this.#editTimer = window.setTimeout(() =>
                    {
                        if (!this.#editCancel)
                        {
                            
                            event.target.contentEditable = true;
                            event.target.focus();                            
                        }                        
                        
                    }, 500);





                    //this.#currentElement = event.target.parentNode;
                }


                this.#SelectionOutline(event.target.parentNode);
                return;
            }

            if (event.target.dataset.itemExtra == "new")
            {
                console.log("adding something");
            }

            
           
        }

      
        #OnDblClick(event)
        {
            this.#editCancel= true;

            console.log("dubbeltrubbel");
            this.#ToggleExpand(event.target.parentNode);

            this.#SelectionOutline(event.target.parentNode);
        }

         
        #ToggleExpand(node)
        {
            let children = node.parentNode.childNodes;
            children.forEach(s => { s.hidden = !s.hidden; });
            node.hidden = false;


            let carret = node.childNodes[1];
            if (carret.classList.contains("carretIcon"))
            {
                carret.classList.toggle("fa-caret-right");
                carret.classList.toggle("fa-caret-down");
            }

            let icon = node.childNodes[3];
            if (icon.classList.contains("folderIcon"))
            {
                icon.classList.toggle("fa-folder");
                icon.classList.toggle("fa-folder-open");
            }

            console.log(icon.classList);

            


            

        }

        #SelectionOutline(node)
        {
            // new current
            if (this.#currentElement != node)
            {
                console.log("new current");
                this.#currentElement = node;
            }


            let rect = node.getBoundingClientRect();
            let rect2 = node.parentNode.getBoundingClientRect();
            let mr = this.#menuDiv.getBoundingClientRect();

            let marginal = rect.top - rect2.top;

            this.#selectBar.style.top = (rect.top - mr.top) + "px";
            this.#selectBar.style.height = (rect.height) + "px";

            this.#selectSelection.style.top = (rect.top - mr.top) + "px";
            this.#selectSelection.style.height = (rect2.height - marginal * 2) + "px";
        }

        #OnDelete(event)
        {
            console.log("delete id:" + event.target.id);
        }

        #OnNew(event)
        {
            console.log("new entity id:" + event.target.id + "can create " + event.target.dataset.itemCreates);
            console.log("belongs to id:" + event.target.dataset.itemParentId + " of type " + event.target.dataset.itemParentType);
        }


        #OnDown(event)
        {
            this.#pressPositionX = event.clientX;
            this.#pressPositionY = event.clientY;
            console.log("on down:" + event.clientY);

            this.#longPress = false; 
            this.#pressTimer = window.setTimeout(() =>
            {
                // your code here
                console.log("timer");
                this.#dragElement.innerHTML = event.target.parentNode.innerHTML;
                this.#dragElement.id = event.target.id;
                this.#dragElement.dataset.itemType = event.target.dataset.itemType;
                this.#longPress = true; //if run hold function, longpress is true
            }, 100);
        }





    }



    new TreeHandler("menuDivId");













    
    



</script>