@using LMSGroupOne.Models.MainNavigation
@model LMSGroupOne.Models.MainNavigation.TreeNode


@*used for javascripts*@
<style>
    treeItem {
    }

    carretIcon {
    }

    folderIcon {
    }
</style>

<script src="~/js/TreeFactory.js" asp-append-version="true"></script>
<script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>



<div id="menuDivId" style="background-color:aqua;">
    <div>
        <i id="trashCanId" class="fa fa-trash-alt" data-item-type="@NodeType.trash" style="font-size:48px;color:black; padding:4px;"></i>

    </div>
    
    <script>
            TreeFactory.GenerateTree(@(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model))), @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model))));
    </script>


    



</div>



<script>

    



   


    class TreeHandler
    {
        #dragElement;
        #pressPositionX;
        #pressPositionY;
        #initialMove;
        #draging;
        #longPress;
        #pressTimer;

        #selectBar;
        #selectSelection;

        #menuDiv;

        #currentElement;
        #editTimer;
        #editCancel;

        #thrashCan;
        #movedElement;

        #contentDiv;

        constructor(menuDivId, contentDivId, thrashCanId)
        {
            this.#pressPositionX = 0;
            this.#pressPositionY = 0;
            this.#initialMove = false;
            this.#draging = false;
            this.#longPress = false;
            this.#editCancel = false;


            window.addEventListener("mouseup", (event)=>this.#OnMouseUp(event));
            window.addEventListener("mousemove", (event)=>this.#OnMouseMove(event));


            let t = document.getElementsByClassName("treeItem");
            for (let i = 0; i < t.length; i++)
            {
                t[i].addEventListener("click", (event) => this.#OnClick(event));
                t[i].addEventListener("dblclick", (event)=> this.#OnDblClick(event))
                t[i].addEventListener("mousedown", (event)=>this.#OnDown(event));
            }




            this.#menuDiv = document.getElementById(menuDivId);

            // the selection
            this.#selectBar = document.createElement("div");
            this.#selectSelection = document.createElement("div");
            this.#menuDiv.prepend(this.#selectBar);
            this.#menuDiv.prepend(this.#selectSelection);
            this.#selectBar.style = "top:-4096px; left:0px; width:100%; height:32px; position:absolute; background-color:#ffff0055;";
            this.#selectSelection.style ="top:-4096px;left:0px;width:100%;height:32px;position:absolute;background-color:#ff000033;";

            // the draggable element
            this.#dragElement = document.createElement("nobr");
            document.body.append(this.#dragElement);
            this.#dragElement.style = "top:-4096px; left:0px; width:00px; height:0px; position:absolute; background-color:#ffff0055; z-index:100;";


            this.#thrashCan = document.getElementById(thrashCanId);

            this.#contentDiv = document.getElementById(contentDivId);
        }

        #OnMouseUp(event)
        {


            this.#dragElement.style.top = -4096 + "px";
            let e = document.elementFromPoint(event.clientX, event.clientY);
            console.log("dragged to>>" + e.id + ": " + e.dataset.itemType);
            console.log("belongs to parent" + e.dataset.itemParentId + ": " + e.dataset.itemParentType);

            if (this.#draging)
            {
                if (e.dataset.itemType == "trash")
                {
                    clearTimeout(this.#pressTimer);
                    this.#longPress = false;
                    this.#initialMove = false;
                    this.#draging = false;


                    this.#OnDelete(event);
                    //return;
                }
            }


            clearTimeout(this.#pressTimer);
            this.#longPress = false;
            this.#initialMove = false;
            this.#draging = false;






            // dragged to


        }

        #OnMouseMove(event)
        {
            if (this.#longPress) {

                if (!this.#initialMove) {
                    let dist = (event.clientX - this.#pressPositionX) * (event.clientX - this.#pressPositionX) + (event.clientY - this.#pressPositionY) * (event.clientY - this.#pressPositionY);
                    if (dist < 50) {
                        //longpress = false;
                        this.#draging = true;
                    }
                    this.#initialMove = true;
                }

                //console.log("distance:" + dist);

            }
            if (this.#draging)
            {
                this.#dragElement.style.top = event.pageY + "px";
                this.#dragElement.style.left = event.pageX + "px";

                let e = document.elementFromPoint(event.clientX, event.clientY);
                //console.log("mosemove-" + e.id + ": " + e.dataset.itemType);

            }

        }



        #OnClick(event)
        {

            if (this.#longPress)
            {
                return;
            }

            console.log("enkel click");
            console.log("id:" + event.target.id);
            console.log("type:" + event.target.dataset.itemType);
            console.log("type:" + event.target.dataset.itemExtra);
            console.log("ypos:" + event.clientY);


            // todo filtera bort folder och dubbelaktivering
            $.ajax({
                type: "GET",
                url: "/MainNavigation/OnTreeClick",
                data: { id: event.target.id, type: event.target.dataset.itemType },
                cache: false,
                success: result =>
                {
                    console.log(result);
                    //this.#contentDiv.innerHTML = result;
                    document.getElementById("contentDivId").innerHTML = result;
                }
            });











            if (event.target.dataset.itemExtra == "caret")
            {

                console.log("current element " + this.#currentElement.dataset.itemType);

                this.#ToggleExpand(event.target.parentNode);
                this.#SelectionOutline(event.target.parentNode);
                return;
            }

            if (event.target.dataset.itemExtra == "text")
            {
                // new current
                if (this.#currentElement == event.target.parentNode)
                {
                    this.#editCancel = false;
                    this.#editTimer = window.setTimeout(() =>
                    {
                        if (!this.#editCancel)
                        {

                            event.target.contentEditable = true;
                            event.target.focus();
                        }

                    }, 500);





                    //this.#currentElement = event.target.parentNode;
                }


                this.#SelectionOutline(event.target.parentNode);
                return;
            }

            if (event.target.dataset.itemExtra == "new")
            {

                console.log("adding something");
                this.#OnNew(event);
            }


            

        }


        #OnDblClick(event)
        {
            this.#editCancel= true;

            console.log("dubbeltrubbel");
            console.log("childCount" + event.target.parentNode.parentNode.childElementCount);
            if (event.target.parentNode.parentNode.childElementCount > 1)
            {
                this.#ToggleExpand(event.target.parentNode);
                this.#SelectionOutline(event.target.parentNode);
            }
        }


        #ToggleExpand(node)
        {
            let children = node.parentNode.childNodes;
            children.forEach(s => { s.hidden = !s.hidden; });
            node.hidden = false;




            let carret = node.childNodes[1];
            if (carret.classList.contains("carretIcon"))
            {
                carret.classList.toggle("fa-caret-right");
                carret.classList.toggle("fa-caret-down");
            }

            let icon = node.childNodes[3];
            if (icon.classList.contains("folderIcon"))
            {
                icon.classList.toggle("fa-folder");
                icon.classList.toggle("fa-folder-open");
            }

            console.log(icon.classList);



            console.log("number of children " + node.parentNode.childElementCount);
            if (node.parentNode.childElementCount <= 1)
            {
                children.forEach(s => { s.hidden = true; });
                node.hidden = false;
                carret.hidden = true;
                icon.classList.add("fa-folder");
                icon.classList.remove("fa-folder-open");

            }




        }

        #SelectionOutline(node)
        {
            // new current
            if (this.#currentElement != node)
            {
                console.log("new current");
                this.#currentElement = node;
            }


            let rect = node.getBoundingClientRect();
            let rect2 = node.parentNode.getBoundingClientRect();
            let mr = this.#menuDiv.getBoundingClientRect();

            let marginal = rect.top - rect2.top;

            this.#selectBar.style.top = (rect.top - mr.top) + "px";
            this.#selectBar.style.height = (rect.height) + "px";

            this.#selectSelection.style.top = (rect.top - mr.top) + "px";
            this.#selectSelection.style.height = (rect2.height - marginal * 2) + "px";
        }






        #OnDown(event)
        {
            this.#pressPositionX = event.clientX;
            this.#pressPositionY = event.clientY;
            console.log("on down:" + event.clientY);

            this.#longPress = false;
            this.#pressTimer = window.setTimeout(() =>
            {
                // your code here
                console.log("timer");
                this.#dragElement.innerHTML = event.target.parentNode.innerHTML;
                this.#dragElement.id = event.target.id;
                this.#dragElement.dataset.itemType = event.target.dataset.itemType;

                this.#movedElement = event.target.parentNode.parentNode.parentNode;

                this.#longPress = true; //if run hold function, longpress is true


            }, 100);
        }


        #OnDelete()
        {
            console.log("delete-----------------")
            console.log("item id" + this.#dragElement.id);
            console.log("item type" + this.#dragElement.dataset.itemType);

            $.ajax({
                type: "GET",
                url: "/MainNavigation/OnDelete",
                data: { id: this.#dragElement.id, type: this.#dragElement.dataset.itemType },
                cache: false,
                success: result =>
                {
                    let obj = JSON.parse(result);
                    console.log(obj.success);
                    if (obj.success)
                    {

                        this.#removeElement(this.#movedElement);
                    }


                }
            });


        }

        #removeElement(element)
        {
            let pNode = element.parentNode;

            element.remove();


            if (pNode.childElementCount <= 1)
            {
                this.#ToggleExpand(pNode.childNodes[1])
            }



            // selections todo refactor
            let rect = pNode.childNodes[1].getBoundingClientRect();
            let rect2 = pNode.parentNode.childNodes[1].getBoundingClientRect();
            let mr = this.#menuDiv.getBoundingClientRect();

            let marginal = rect.top - rect2.top;

            this.#selectBar.style.top = (rect.top - mr.top) + "px";
            this.#selectBar.style.height = (rect.height) + "px";

            this.#selectSelection.style.top = (rect.top - mr.top) + "px";
            this.#selectSelection.style.height = (rect2.height - marginal * 2) + "px";





        }



        #OnNew(event)
        {
            console.log("new---------------------------")
            console.log("new entity id:" + event.target.id + "can create " + event.target.dataset.itemCreates);
            console.log("belongs to id:" + event.target.dataset.itemParentId + " of type " + event.target.dataset.itemParentType);

            $.ajax({
                type: "GET",
                url: "/MainNavigation/OnNew",
                data: { id: event.target.dataset.itemParentId, type: event.target.dataset.itemCreates },
                cache: false,
                success: result => {
                    let obj = JSON.parse(result);
                    console.log("result forn new "+obj.type);
                    if (obj.success)
                    {

                        // todo add element
                        this.#AddElement(event, obj.id, obj.type, obj.parentId, obj.parentType, obj.name);
                    }
                    //string parentId, string parentType

                }
            });
        }

        #AddElement(event, id, type, parentId, parentType, name)
        {
            let listGroup = document.createElement("ul");
            listGroup.classList = "list-group";


            let listItem = document.createElement("li");
            listItem.classList = "list-group-item";
            listItem.style = "background:none;";


            let item = TreeFactory.GenerateItem(id, type, parentId, parentType, name);
            

           
            listItem.appendChild(item);
            listGroup.appendChild(listItem);
            event.target.parentNode.parentNode.append(listGroup);

           
            item.addEventListener("click", (event) => this.#OnClick(event));
            item.addEventListener("dblclick", (event) => this.#OnDblClick(event));
            item.addEventListener("mousedown", (event) => this.#OnDown(event));




            item.addEventListener("paste", function(even)  {
                
                
                var $self = $(this);
                setTimeout(function () {
                    $self.html($self.text());
                }, 0);

                
                
            }, false);

            item.addEventListener("keypress", (event) =>
            {
                if (event.which == 13)
                {
                    event.target.contentEditable = false;
                }
                return event.which != 13;
                
            });

            item.addEventListener("blur", (event) =>
            {
                console.log("lost focus", true);
                event.target.contentEditable = false;
            }, true);

            



          


        }


    }



    new TreeHandler("menuDivId", "contentDivId", "thrashCanId");


















</script>